Структура проекта:

Builds/Chess - исполняемые файлы игры
Builds/win|unix - сборочные файлы для винды/юникса 
BuildTool - хранит ninja - эффективная система сборки


Projects/Chess/Resources - ресурсы(текстуры, текстовые файлы и т.д.) Относительно этой папки движок ишет файлы.
Projects/Chess/Shaders - шейдеры, есть пример шейдера спрайта на языке glsl, можете добавлять свои
Projects/Sources - код движка

Интерфейс движка:

Получить путь до игрового ресурса
#include <Application/application.h>
std::string project_resources_path("Pictures/my_picture.png");

Используется математическая библиотека glm, все основные инклюды собраны в 
#include <3dmath.h>
А также константы: PI, PIHALF = PI * 0.5f, PITWO = PI * 2.0f, DegToRad = PI / 180.f, RadToDeg = 1.f / DegToRad
И небольшой набор получения случайных значений
rand_int(N), rand_float(0, 1), rand_vec2(-1, 1), rand_vec3(0, 100), rand_vec4(-0.5, 0.5)

Для дебажной печати можно использовать функции 
debug_log(), debug_error() - выделит текст красным

В качестве UI используется ImGui. 
Этот UI полностью задется кодом, поэтому очень удобен для программиста, у которого нет задачи сделать красивый пользовательствий интерфейс. 
#include <Engine/imgui/imgui.h> 
Небольшой туториал можно посмотреть здесь https://brokencore.club/threads/6445/

Обработка пользовательского ввода.
#include <Engine/input.h>

static float get_key(SDL_Keycode keycode);
Возвращает значение от 0 до 1

static MousePosition get_mouse_position();
Позиция мыши в экранных координатах

static float get_wheel();
Прокрутка колесика мышки, возвращает значение в промежутке [-1, 1]


Работа со временем

#include <Engine/time.h>
Time::time() - возвращает текущее время фрейма.
Time::delta_time() - возвращает разницу между временем текущего время и прошедшего.

2d трансформ
#include <Engine/tranform2d.h>

struct Transform2D - содержит позицию, размер и поворот в 2d координатах. 

Рендер.

создание текстуры: 
new Texture2D(project_resources_path("figures.png"), RGBA)
#include <Engine/Render/Texture/texture.h>

Получение шейдера по его имени:
get_shader("standart_sprite");
#include <Engine/Render/Shader/shader.h>

Спрайты. Спрайты нужны для того, чтобы указать какую часть текстуры нужно использовать.
И при отрисовке мы уже используем не только текстуру, но и информацию о подобласти, которую хотим интерпретировать как изображение.

#include <Engine/Render/sprite.h>

Рендер специфичные вещи хранятся в WorldRenderer

#include <Engine/Render/world_render.h>

В нем лежит список текстур, шейдер для отрисовки спрайтов, разрешение экрана, матрица преобразования из экранных координат в мировые.

Методы этого класса 
Texture2D *add_texture(Texture2D *texture);
Texture2D *get_texture(const std::string &name);
vec2 screen_to_world(int x, int y);//функция для перевода из пространства экрана в мировое пространство.



 




